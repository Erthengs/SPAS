<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        PwA=
</value>
  </data>
</root>